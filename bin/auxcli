#!/bin/bash
set -e

#### Commands can access any variables set in this file
#### as long as they are run as an 'auxcli [command]'.

#### Commands run with an absolute path will not have
#### access to the variables. (This next debug-check as an example.)

#### Call all helper commands directly to avoid confusing looping
path_to_helper="/lib/auxcli/commands/helper"
. $path_to_helper/debug-check

# Config paths
config_main="/etc/auxcli/config.json"
config_main_tmp="/etc/auxcli/config.json.tmp"
config_commands="/etc/auxcli/commands.json"
config_commands_tmp="/etc/auxcli/commands.json.tmp"
config_components="/etc/auxcli/components.json"
config_components_tmp="/etc/auxcli/components.json.tmp"
config_devices="/etc/auxcli/devices.json"
config_devices_tmp="/etc/auxcli/devices.json.tmp"

# Command information
readarray -t commands < <(jq -r '.[] | select( .available != null) | .name' $config_commands)
readarray -t commands_desc < <(jq -r '.[] | select( .available != null) | .short_desc' $config_commands)

# Component information
readarray -t components < <(jq -r '.[] | .name' $config_components)
readarray -t components_desc < <(jq -r '.[] | .short_desc' $config_components)
readarray -t configuration < <(jq -r '.[] | select(.type == "configuration") | .name' $config_components)
readarray -t hardware < <(jq -r '.[] | select(.type == "hardware") | .name' $config_components)
readarray -t tool < <(jq -r '.[] | select(.type == "tool") | .name' $config_components)

usage() {
    printf "\nUsage:        auxcli [COMMAND]\n\n"
    printf "Command line tools for AUX dealing more with the hardware/server than auxplayer itself.\n\n"
    printf "COMMANDS:\n"
    for ((i = 0; i < ${#commands[@]}; i++)); do
        if . $path_to_helper/available ${commands[$i]}; then
            # \t        Tab
            # [ ]       Marked if available
            # %-24s     Left-Aligned column 24 spaces wide that contains the first 's' string
            # \t        Tabs
            # %s        The second string passed as an argument
            # \n        Newline
            printf "\t[x] %-24s\t%s\n" "${commands[$i]}" "${commands_desc[$i]}"
        else
            printf "\t[ ] %-24s\t%s\n" "${commands[$i]}" "${commands_desc[$i]}"
        fi
    done
    printf "\t%-4s\t\t\t\t%s\n" "help" "Displays this usage information."
    printf "\nRun 'auxcli COMMAND --help' for more information on a command.\n\n"
    exit 1
}

err_check() {
    # First error check
    # Show the usage menu if there aren't any arguments after `auxcli`
    # or if the command is "help"
    . $path_to_helper/debug-printf "DEBUG (auxcli): First error check.\n"
    if [ $# -eq 0 ] || [ "$1" == "help" ]; then
        usage
    fi

    # Second error check
    # Throw an error messege if the first argument isn't a command
    . $path_to_helper/debug-printf "DEBUG (auxcli): Second error check.\n"
    if [[ ! ${commands[*]} =~ $1 ]]; then
        printf "\n\"%s\" is not a valid command.\n" "$1"
        printf "Run 'auxcli help' for help.\n\n"
        exit 1
    fi

    # Third error check
    # Throw an error messege if the first argument isn't an available command
    . $path_to_helper/debug-printf "DEBUG (auxcli): Third error check.\n"
    if ! . $path_to_helper/available "$1"; then
        printf "\nThe \"%s\" command is not available. Install the correct component first.\n\n" "$1"
        exit 1
    fi
}

run_cmd() {
    # Set the first argument to be the command and then shift past it
    command_path=$(jq --arg cmd "$1" -r '.[] | select( .name == $cmd ) | .command_path' $config_commands)
    . $path_to_helper/debug-printf "DEBUG (auxcli): The command path is %s.\n" "$command_path"
    shift

    # Add all other arguments to an array
    while [[ $# -gt 0 ]]; do
        . $path_to_helper/debug-printf "DEBUG (auxcli): Adding %s to the command argument array.\n" "$1"
        command_args+=("$1")
        shift
    done

    # If there are no arguments for the command, just run the command
    if [ ${#command_args[@]} -eq 0 ]; then
        . $path_to_helper/debug-printf "DEBUG (auxcli): Running command: %s\n" "${command_path}"
        . "${command_path}"
    else
        . $path_to_helper/debug-printf "DEBUG (auxcli): Running command with args: %s %s\n" "${command_path}" "${command_args[*]}"
        . "${command_path}" "${command_args[@]}"
    fi
}

err_check "$@"
run_cmd "$@"

. $path_to_helper/debug-printf "DEBUG (auxcli): Checking reboot settings.\n"
. $path_to_helper/reboot-apply
