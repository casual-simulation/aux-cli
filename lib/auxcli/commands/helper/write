#!/bin/bash
set -e

# Config paths
config_main="/etc/auxcli/config.json"
config_main_tmp="/etc/auxcli/config.json.tmp"
config_commands="/etc/auxcli/commands.json"
config_commands_tmp="/etc/auxcli/commands.json.tmp"
config_components="/etc/auxcli/components.json"
config_components_tmp="/etc/auxcli/components.json.tmp"
config_devices="/etc/auxcli/devices.json"
config_devices_tmp="/etc/auxcli/devices.json.tmp"
readarray -t current_devices < <(jq -r '.[].mac' $config_devices)

# . $path_to_helper/write [file] [OPTIONAL: command/component] [key] [value]

while [[ $# -gt 0 ]]; do
    case "$1" in
    commands)
        . $path_to_helper/debug-printf "DEBUG (write): Writing to commands.json.\n"
        sudo jq --arg command "$2" --arg key "$3" --arg value "$4" '(.[] | select (.name == $command) | .[$key]) = $value' $config_commands | sudo tee $config_commands_tmp 1> /dev/null
        sudo mv -f $config_commands_tmp $config_commands
        shift # past commands
        shift # past command
        shift # past key
        shift # past value
        ;;
    components)
        . $path_to_helper/debug-printf "DEBUG (write): Writing to components.json.\n"
        sudo jq --arg component "$2" --arg key "$3" --arg value "$4" '(.[] | select (.name == $component) | .[$key]) = $value' $config_components | sudo tee $config_components_tmp 1> /dev/null
        sudo mv -f $config_components_tmp $config_components
        shift # past components
        shift # past command
        shift # past key
        shift # past value
        ;;
    config)
        . $path_to_helper/debug-printf "DEBUG (write): Writing to config.json.\n"
        sudo jq --arg key "$2" --arg value "$3" '(.[$key]) = $value' $config_main | sudo tee $config_main_tmp 1> /dev/null
        sudo mv -f $config_main_tmp $config_main
        shift # past config
        shift # past key
        shift # past value
        ;;
    devices)
        # If the device doesn't already exist
        if [[ ! ${current_devices[*]} =~ $2 ]]; then
            # Add the device
            jq --arg mac "$2" --arg name "$3" --arg desc "$4" '. += [{"mac": $mac, "name": $name, "active": true, "desc": $desc}]' $config_devices | sudo tee $config_devices_tmp 1> /dev/null
            sudo mv -f $config_devices_tmp $config_devices
        fi

        # Make sure the device list is up to date
        readarray -t current_devices < <(jq -r '.[].mac' $config_devices)

        # If the device name isn't 'n/a' and it doesn't already exist
        if [ ! $3 == n/a ] && [[ ! ${current_devices[*]} =~ $3 ]]; then
            # Update the device name of the corresponding mac
            jq --arg mac "$2" --arg name "$3" '(.[] | select (.mac == $mac) | .name) = $name' $config_devices | sudo tee $config_devices_tmp 1> /dev/null
            sudo mv -f $config_devices_tmp $config_devices
        fi
        
        shift # past mac
        shift # past name
        shift # past desc
        ;;
    *)
        shift # past unknown command
        ;;
    esac
done

