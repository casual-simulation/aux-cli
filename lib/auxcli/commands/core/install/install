#!/bin/bash
set -e

# Config path for install
config_install=$(jq -r '.[] | select( .name == "install" ) | .config_path' $config_commands)
. $path_to_helper/debug-printf "DEBUG (install): Config path: %s\n" "$config_install"

# Arguments for install
readarray -t args_short < <(jq -r '.[].arg_short' $config_install)
readarray -t args_long < <(jq -r '.[].arg_long' $config_install)
readarray -t args_desc < <(jq '.[].short_desc' $config_install)
args=("${args_short[@]}" "${args_long[@]}")

usage() {
    printf "\nUsage:        auxcli install [COMPONENT]\n\n"
    printf "Install additional components of auxcli.\n\n"
    printf "COMPONENTS:\n"
    for ((i = 0; i < ${#components[@]}; i++)); do
        if . $path_to_helper/installed ${components[$i]}; then
            printf "\t[x] %-24s\t%s\n" "${components[$i]}" "${components_desc[$i]}"
        else
            printf "\t[ ] %-24s\t%s\n" "${components[$i]}" "${components_desc[$i]}"
        fi
    done
    printf "\t    %-10s\t\t\t%s\n" "everything" "Install all tools."
    for ((i = 0; i < ${#args_desc[@]}; i++)); do
        printf "\t%-2s\t%-10s\t%s\n" "${args_short[$i]}" "${args_long[$i]}" "${args_desc[$i]}"
    done
    exit 1
}

err_check() {
    # Everything check
    # Check to see if the arguments include everything
    . $path_to_helper/debug-printf "DEBUG (install): Everything check.\n"
    if [[ "everything" == "$1" ]]; then
        return 0
    fi

    # First error check
    # Show the usage menu if there aren't any arguments
    . $path_to_helper/debug-printf "DEBUG (install): First error check.\n"
    if [ $# -eq 0 ]; then
        usage
    fi

    # Second error check
    # Throw an error messege if the first argument isn't a component
    . $path_to_helper/debug-printf "DEBUG (install): Second error check.\n"
    if [[ ! ${components[*]} =~ $1 ]]; then
        printf "\n\"%s\" is not a valid component.\n" "$1"
        printf "Run 'auxcli install -h' for help.\n\n"
        exit 1
    fi

    # Third error check
    # Throw an error messege if the first argument isn't valid
    . $path_to_helper/debug-printf "DEBUG (install): Third error check.\n"
    if [[ ! ${args[*]} =~ $1 ]]; then
        printf "\n\"%s\" is not a valid argument.\n" "$1"
        printf "Run 'auxcli install -h' for help.\n\n"
        exit 1
    fi

    # Fourth error check
    # Throw an error messege if the component is already installed
    . $path_to_helper/debug-printf "DEBUG (install): Fourth error check.\n"
    if . $path_to_helper/installed "$1"; then
        printf "\nThe \"%s\" component is already installed.\n\n" "$1"
        exit 1
    fi
}

install_component(){
    . $path_to_helper/debug-printf "DEBUG (install): DHCPCD set check.\n"
    if . $path_to_helper/available dhcpcd; then auxcli dhcpcd -s; fi
    while [[ $# -gt 0 ]]; do
        if . $path_to_helper/requires-reboot $1; then
            . $path_to_helper/debug-printf "DEBUG (install): %s requires a reboot.\n" "$1"
            . $path_to_helper/debug-printf "DEBUG (install): Setting reboot_required to 'true'\n"
            . $path_to_helper/write "config" "reboot_required" "true"
        fi
        if [[ ${hardware[*]} =~ $1 ]]; then
            . $path_to_helper/debug-printf "DEBUG (install): %s is a 'hardware' component.\n" "$1"
            . $path_to_helper/debug-printf "DEBUG (install): Installing: %s...\n" "$1"
            . /lib/auxcli/components/hardware/$1/install
        fi
        if [[ ${tool[*]} =~ $1 ]]; then
            . $path_to_helper/debug-printf "DEBUG (install): %s is a 'tool' component.\n" "$1"
            . $path_to_helper/debug-printf "DEBUG (install): Installing: %s...\n" "$1"
            . /lib/auxcli/components/tool/$1/install
        fi
        shift
    done
    . $path_to_helper/debug-printf "DEBUG (install): DHCPCD unset check.\n"
    if . $path_to_helper/available dhcpcd; then auxcli dhcpcd -u; fi
}

install_everything(){
    # Enable all the things
    . $path_to_helper/debug-printf "DEBUG (install): Enabling: gpio\n"
    auxcli enable gpio
    . $path_to_helper/debug-printf "DEBUG (install): Enabling: uart\n"
    auxcli enable uart
    . $path_to_helper/debug-printf "DEBUG (install): Disabling: serial-console\n"
    auxcli disable serial-console

    # Install all the things
    . $path_to_helper/debug-printf "DEBUG (install): Installing everything...\n"
    install_component "${tool[@]}"
}

err_check "$@"

while [[ $# -gt 0 ]]; do
    case "$1" in
    everything)
        install_everything
        shift # past argument
        ;;
    -r | --reboot)
        . $path_to_helper/debug-printf "DEBUG (install): Setting reboot_on_exit to 'true'\n"
        . $path_to_helper/write "config" "reboot_on_exit" "true"
        shift # past argument
        ;;
    -h | -help | --help)
        usage
        shift # past argument
        ;;
    *)
        install_component "$1"
        shift # past argument
        ;;
    esac
done
