#!/bin/bash
set -e

config_main="/etc/auxcli/config.json"
tmp_main="/etc/auxcli/config.json.tmp"

# Temporarily add this dir to the path so we can use helper commands
PATH=$PATH:/lib/auxcli/commands/helper

components_config="/etc/auxcli/components.json"
components=($(jq -r '.[] | select( .installed != null) | .name' $components_config))
components_type=($(jq -r '.[].type' /etc/auxcli/components.json))

# readarray splits each newline into one element in the array
readarray -t components_desc < <(jq -r '.[] | select( .installed != null) | .short_desc' $components_config)

usage() {
    printf "\nUsage:        auxcli install [COMPONENT]\n\n"
    printf "Install additional components of auxcli.\n\n"
    printf "COMPONENTS:\n"
    for ((i = 0; i < ${#components[@]}; i++)); do
        if installed ${components[$i]}; then
            printf "\t[x] %-24s\t%s\n" "${components[$i]}" "${components_desc[$i]}"
        else
            printf "\t[ ] %-24s\t%s\n" "${components[$i]}" "${components_desc[$i]}"
        fi
    done
    printf "\t    %-10s\t\t\t%s\n" "everything" "Install all tools."
    printf "\t    %-2s\t%-6s\t\t\t%s\n" "-h" "--help" "Displays this usage information."
    exit 1
}

err_check() {
    # First error check
    # Show the usage menu if there aren't any arguments
    # or if the argument is "-h" or "--help"
    if [ $# -eq 0 ] || [ $1 == "-h" ] || [ $1 == "--help" ]; then
        usage
    fi

    if [ $1 == "everything" ]; then
        return 0
    fi

    # Second error check
    # Throw an error messege if the first argument isn't a component
    if [[ ! ${components[*]} =~ $1 ]]; then
        printf "\n\"$1\" is not a valid component.\n"
        printf "Run 'auxcli install -h' for help.\n\n"
        exit 1
    fi

    # Third error check
    # Throw an error messege if the component is already installed
    if installed $1; then
        printf "\nThe \"$1\" component is already installed.\n\n"
        exit 1
    fi
}

install_component(){
    if [ "$1" == "everything" ]; then
        # Enable all the things
        echo "DEBUG: Enabling everything"
        if ! enabled gpio; then auxcli enable gpio; fi
        if ! enabled uart; then auxcli enable uart; fi
        if enabled serial-console; then auxcli disable serial-console; fi

        # Install all the things
        echo "DEBUG: Installing everything"
        for ((i = 0; i < ${#components[@]}; i++)); do
            if [ "${components_type[$i]}" == "tool" ]; then
                echo "DEBUG: ${components[$i]} is a tool."
                if requires-reboot ${components[$i]}; then
                    # Write Reboot Required
                    echo "DEBUG: ${components[$i]} requires a reboot. Setting the flag in config.json"
                    jq '(.reboot_required) = true' $config_main | sudo tee $tmp_main
                    sudo mv -f $tmp_main $config_main
                fi
                if ! installed "${components[$i]}"; then auxcli install "${components[$i]}"; fi
            fi
        done
    else
        if available dhcpcd; then auxcli dhcpcd -s; fi
        while [[ $# -gt 0 ]]; do
            if requires-reboot $1; then
                # Write Reboot Required
                jq '(.reboot_required) = true' $config_main | sudo tee $tmp_main
                sudo mv -f $tmp_main $config_main
            fi
            . /lib/auxcli/components/tool/$1/install || . /lib/auxcli/components/hardware/$1/install
            shift
        done
        if available dhcpcd; then auxcli dhcpcd -u; fi
    fi
}

err_check "$@"
install_component "$@"

if jq -r '.reboot_required' $config_main; then
    echo "A reboot is required"
fi