#!/bin/bash
set -e

# Config path for reinstall
config_reinstall=$(jq -r '.[] | select( .name == "reinstall" ) | .config_path' $config_commands)
. $path_to_helper/debug-printf "DEBUG (reinstall): Config path: %s\n" "$config_reinstall"

# Arguments for reinstall
readarray -t args_short < <(jq -r '.[].arg_short' $config_reinstall)
readarray -t args_long < <(jq -r '.[].arg_long' $config_reinstall)
readarray -t args_desc < <(jq -r '.[].short_desc' $config_reinstall)
args=("${args_short[@]}" "${args_long[@]}")

usage() {
    printf "\nUsage:        auxcli reinstall [ARGUMENT] [COMPONENT]\n\n"
    printf "Reinstall additional components of auxcli.\n\n"
    printf "ARGUMENTS:\n"
    for ((i = 0; i < ${#args_desc[@]}; i++)); do
        printf "\t%-2s\t%-10s\t\t%s\n" "${args_short[$i]}" "${args_long[$i]}" "${args_desc[$i]}"
    done
    printf "\nCOMPONENTS:\n"
    for ((i = 0; i < ${#components[@]}; i++)); do
        if . $path_to_helper/installed ${components[$i]}; then
            printf "\t[x] %-24s\t%s\n" "${components[$i]}" "${components_desc[$i]}"
        else
            printf "\t[ ] %-24s\t%s\n" "${components[$i]}" "${components_desc[$i]}"
        fi
    done
    exit 1
}

err_check() {
    # First error check
    # Throw an error messege if the first argument isn't valid
    . $path_to_helper/debug-printf "DEBUG (reinstall): Error Check: 1 of 2: %s\n" "$1"
    if [[ ! ${components[*]} =~ $1 ]] && [[ ! ${args[*]} =~ $1 ]]; then
        printf "\n\"%s\" is not a valid component or argument.\n" "$1"
        printf "Run 'auxcli reinstall -h' for help.\n\n"
        exit 1
    fi

    # Second error check
    # Throw an error messege if the component is already installed
    . $path_to_helper/debug-printf "DEBUG (reinstall): Error Check: 2 of 2: %s\n" "$1"
    if ! . $path_to_helper/installed "$1"; then
        printf "\nThe \"%s\" component isn't installed.\n\n" "$1"
        exit 0
    fi
}

reinstall_component(){
    . $path_to_helper/debug-printf "DEBUG (reinstall): DHCPCD set check.\n"
    if . $path_to_helper/available dhcpcd; then auxcli dhcpcd -s; fi
    while [[ $# -gt 0 ]]; do
        if . $path_to_helper/requires-reboot "$1"; then
            . $path_to_helper/debug-printf "DEBUG (reinstall): %s requires a reboot.\n" "$1"
            . $path_to_helper/debug-printf "DEBUG (reinstall): Setting reboot_required to 'true'\n"
            . $path_to_helper/write "config" "reboot_required" "true"
        fi
        if [[ ${hardware[*]} =~ $1 ]]; then
            . $path_to_helper/debug-printf "DEBUG (reinstall): %s is a 'hardware' component.\n" "$1"
            . $path_to_helper/debug-printf "DEBUG (reinstall): Uninstalling: %s...\n" "$1"
            . /lib/auxcli/components/hardware/$1/uninstall
            . $path_to_helper/debug-printf "DEBUG (reinstall): Reinstalling: %s...\n" "$1"
            . /lib/auxcli/components/hardware/$1/install
        fi
        if [[ ${tool[*]} =~ $1 ]]; then
            . $path_to_helper/debug-printf "DEBUG (reinstall): %s is a 'tool' component.\n" "$1"
            . $path_to_helper/debug-printf "DEBUG (reinstall): Uninstalling: %s...\n" "$1"
            . /lib/auxcli/components/tool/$1/uninstall
            . $path_to_helper/debug-printf "DEBUG (reinstall): Reinstalling: %s...\n" "$1"
            . /lib/auxcli/components/tool/$1/install
        fi
        shift
    done
    . $path_to_helper/debug-printf "DEBUG (reinstall): DHCPCD unset check.\n"
    if . $path_to_helper/available dhcpcd; then auxcli dhcpcd -u; fi
}

# Show the usage menu if there aren't any arguments
. $path_to_helper/debug-printf "DEBUG (install): Empty Check.\n"
if [ $# -eq 0 ]; then usage; fi

while [[ $# -gt 0 ]]; do
    if ! err_check "$1"; then shift; continue; fi
    case "$1" in
    -r | --reboot)
        . $path_to_helper/debug-printf "DEBUG (reinstall): Setting reboot_on_exit to 'true'\n"
        . $path_to_helper/write "config" "reboot_on_exit" "true"
        shift # past argument
        ;;
    -h | -help | --help)
        usage
        shift # past argument
        ;;
    *)
        reinstall_component "$1"
        shift # past argument
        ;;
    esac
done
