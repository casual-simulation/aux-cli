#!/bin/bash
set -e

# Config path for btmode
config_btmode=$(jq -r '.[] | select( .name == "btmode" ) | .config_path' $config_commands)
. $path_to_helper/debug-printf "DEBUG (btmode): Config path: %s\n" "$config_btmode"

# Arguments for btmode
readarray -t args_short < <(jq -r '.[].arg_short' $config_btmode)
readarray -t args_long < <(jq -r '.[].arg_long' $config_btmode)
readarray -t args_desc < <(jq -r '.[].short_desc' $config_btmode)
args=("${args_short[@]}" "${args_long[@]}")

previous_mode=$(jq -r '.btmode' $config_main)
. $path_to_helper/debug-printf "DEBUG (btmode): Previous mode: %s\n" "$previous_mode"

usage() {
    printf "\nUsage:    auxcli btmode [ARGUMENT] [OPTIONS]\n\n"
    printf "A tool for configuring the bluetooth mode.\n\n"
    printf "ARGUMENTS:\n"
    for ((i = 0; i < ${#args_desc[@]}; i++)); do
        if [ -n "${args_short[$i]}" ]; then
            printf "\t%-2s\t%-10s\t%s\n" "${args_short[$i]}" "${args_long[$i]}" "${args_desc[$i]}"
        fi
    done
    printf "\nOPTIONS:\n"
    for ((i = 0; i < ${#args_desc[@]}; i++)); do
        if [ -z "${args_short[$i]}" ]; then
            printf "\t%-6s\t\t\t%s\n" "${args_long[$i]}" "${args_desc[$i]}"
        fi
    done
    exit 1
}

err_check() {
    # First error check
    # Show the usage menu if there aren't any arguments
    . $path_to_helper/debug-printf "DEBUG (btmode): First error check.\n"
    if [ $# -eq 0 ]; then
        usage
    fi

    # Second error check
    # Throw an error messege if the first argument isn't valid
    . $path_to_helper/debug-printf "DEBUG (btmode): Second error check.\n"
    if [[ ! ${args[*]} =~ $1 ]]; then
        printf "\n\"%s\" is an invalid argument.\n" "$1"
        printf "Run auxcli btmode -h for help.\n\n"
        exit 1
    fi
}

err_check "$@"

while [[ $# -gt 0 ]]; do
    case "$1" in
    none)
        . $path_to_helper/debug-printf "DEBUG (btmode): Setting btmode to 'none'\n"
        . $path_to_helper/write "config" "btmode" "none"
        if [ "$previous_mode" == "tether" ]; then
            . $path_to_helper/debug-printf "DEBUG (btmode): Previous mode was 'tether'\n"
            . $path_to_helper/debug-printf "DEBUG (btmode): Stopping service: auxcli-bt-tether.\n"
            sudo systemctl stop auxcli-bt-tether
            . $path_to_helper/debug-printf "DEBUG (btmode): Disabling service: auxcli-bt-tether.\n"
            sudo systemctl disable auxcli-bt-tether
            . $path_to_helper/debug-printf "DEBUG (btmode): Setting reboot_required to 'true'\n"
            . $path_to_helper/write "config" "reboot_required" "true"
        elif [ "$previous_mode" == "serial" ]; then
            . $path_to_helper/debug-printf "DEBUG (btmode): Stopping service: auxcli-bt-serial-scan.\n"
            sudo systemctl stop auxcli-bt-serial-scan
            . $path_to_helper/debug-printf "DEBUG (btmode): Disabling service: auxcli-bt-serial-scan.\n"
            sudo systemctl disable auxcli-bt-serial-scan
        fi
        shift # past argument
        ;;
    tether)
        . $path_to_helper/debug-printf "DEBUG (btmode): Setting btmode to 'tether'\n"
        . $path_to_helper/write "config" "btmode" "tether"
        if [ "$previous_mode" == "serial" ]; then
            . $path_to_helper/debug-printf "DEBUG (btmode): Previous mode was 'serial'\n"
            . $path_to_helper/debug-printf "DEBUG (btmode): Stopping service: auxcli-bt-serial-scan.\n"
            sudo systemctl stop auxcli-bt-serial-scan
            . $path_to_helper/debug-printf "DEBUG (btmode): Disabling service: auxcli-bt-serial-scan.\n"
            sudo systemctl disable auxcli-bt-serial-scan
        fi
        . $path_to_helper/debug-printf "DEBUG (btmode): Enabling service: auxcli-bt-tether.\n"
        sudo systemctl enable auxcli-bt-tether
        . $path_to_helper/debug-printf "DEBUG (btmode): Starting service: auxcli-bt-tether.\n"
        sudo systemctl start auxcli-bt-tether
        shift # past argument
        ;;
    serial)
        . $path_to_helper/debug-printf "DEBUG (btmode): Setting btmode to 'serial'\n"
        . $path_to_helper/write "config" "btmode" "serial"
        if [ "$previous_mode" == "tether" ]; then
            . $path_to_helper/debug-printf "DEBUG (btmode): Previous mode was 'tether'\n"
            . $path_to_helper/debug-printf "DEBUG (btmode): Stopping service: auxcli-bt-tether.\n"
            sudo systemctl stop auxcli-bt-tether
            . $path_to_helper/debug-printf "DEBUG (btmode): Disabling service: auxcli-bt-tether.\n"
            sudo systemctl disable auxcli-bt-tether
            . $path_to_helper/debug-printf "DEBUG (btmode): Setting reboot_required to 'true'\n"
            . $path_to_helper/write "config" "reboot_required" "true"
        fi
        . $path_to_helper/debug-printf "DEBUG (btmode): Enabling service: auxcli-bt-serial-scan.\n"
        sudo systemctl enable auxcli-bt-serial-scan
        . $path_to_helper/debug-printf "DEBUG (btmode): Starting service: auxcli-bt-serial-scan.\n"
        sudo systemctl start auxcli-bt-serial-scan
        shift # past argument
        ;;
    -r | --reboot)
        . $path_to_helper/debug-printf "DEBUG (btmode): Setting reboot_on_exit to 'true'\n"
        . $path_to_helper/write "config" "reboot_on_exit" "true"
        shift # past argument
        ;;
    -h | -help | --help)
        usage
        shift # past argument
        ;;
    esac
done
