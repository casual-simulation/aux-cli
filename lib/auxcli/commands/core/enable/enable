#!/bin/bash
set -e

# Temporarily add this dir to the path so we can use helper commands
PATH=$PATH:/lib/auxcli/commands/helper

components_config="/etc/auxcli/components.json"
components=($(jq -r '.[] | select( .enabled != null) | .name' $components_config))

# readarray splits each newline into one element in the array
readarray -t components_desc < <(jq '.[].short_desc' $components_config)

usage() {
    printf "\nUsage:        auxcli enable [COMPONENT]\n\n"
    printf "Enable system related components of auxcli.\n\n"
    printf "COMPONENTS:\n"
    for ((i = 0; i < ${#components[@]}; i++)); do
        if enabled ${components[$i]}; then
            printf "\t[x] %-24s\t%s\n" "${components[$i]}" "${components_desc[$i]}"
        elif ! enabled ${components[$i]}; then
            printf "\t[ ] %-24s\t%s\n" "${components[$i]}" "${components_desc[$i]}"
        fi
    done
    printf "\t    %-2s\t%-14s\t%s\n" "-h" "--help" "Displays this usage information."
    exit 1
}

err_check() {
    # First error check
    # Show the usage menu if there aren't any arguments
    # or if the argument is "-h" or "--help"
    if [ $# -eq 0 ] || [ $1 == "-h" ] || [ $1 == "--help" ]; then
        usage
    fi

    # Second error check
    # Throw an error messege if the first argument isn't a component
    if [[ ! ${components[*]} =~ $1 ]]; then
        printf "\n\"$1\" is not a valid component.\n"
        printf "Run 'auxcli enable -h' for help.\n\n"
        exit 1
    fi

    # Third error check
    # Throw an error messege if the component is already enabled
    if enabled $1; then
        printf "\nThe \"$1\" component is already enabled.\n\n"
        exit 1
    fi
}

enable_component(){
    while [[ $# -gt 0 ]]; do
        . /lib/auxcli/components/configuration/$1/enable
        shift
    done
}

err_check "$@"
enable_component "$@"
