#!/bin/bash
set -e

# Config path for uninstall
config_uninstall=$(jq -r '.[] | select( .name == "uninstall" ) | .config_path' $config_commands)
auxcli debug-printf "DEBUG (uninstall): Config path: %s\n" "$config_uninstall"

# Arguments for uninstall
readarray -t args_short < <(q -r '.[].arg_short' $config_uninstall)
readarray -t args_long < <(q -r '.[].arg_long' $config_uninstall)
readarray -t args_desc < <(jq '.[].short_desc' $config_uninstall)
args=("${args_short[@]}" "${args_long[@]}")

usage() {
    printf "\nUsage:        auxcli uninstall [COMPONENT]\n\n"
    printf "Uninstall additional components of auxcli.\n\n"
    printf "COMPONENTS:\n"
    for ((i = 0; i < ${#components[@]}; i++)); do
        if auxcli installed ${components[$i]}; then
            printf "\t[x] %-24s\t%s\n" "${components[$i]}" "${components_desc[$i]}"
        else
            printf "\t[ ] %-24s\t%s\n" "${components[$i]}" "${components_desc[$i]}"
        fi
    done
    printf "\t    %-10s\t\t\t%s\n" "everything" "Uninstall all tools."
    for ((i = 0; i < ${#args_desc[@]}; i++)); do
        printf "\t%-2s\t%-10s\t%s\n" "${arg_short[$i]}" "${args_long[$i]}" "${args_desc[$i]}"
    done
    exit 1
}

err_check() {
    # First error check
    # Show the usage menu if there aren't any arguments
    auxcli debug-printf "DEBUG (uninstall): First error check.\n"
    if [ $# -eq 0 ]; then
        usage
    fi

    # Second error check
    # Throw an error messege if the first argument isn't a component
    auxcli debug-printf "DEBUG (uninstall): Second error check.\n"
    if [[ ! ${components[*]} =~ $1 ]]; then
        printf "\n\"%s\" is not a valid component.\n" "$1"
        printf "Run 'auxcli uninstall -h' for help.\n\n"
        exit 1
    fi

    # Third error check
    # Throw an error messege if the component isn't installed
    if ! installed $1; then
        printf "\nThe \"$1\" component isn't installed.\n\n"
        exit 1
    fi
}

uninstall_component(){
    auxcli debug-printf "DEBUG (uninstall): DHCPCD set check.\n"
    if auxcli available dhcpcd; then auxcli dhcpcd -s; fi
    while [[ $# -gt 0 ]]; do
            . /lib/auxcli/components/tool/$1/uninstall || . /lib/auxcli/components/hardware/$1/uninstall
        shift
    done
    auxcli debug-printf "DEBUG (uninstall): DHCPCD unset check.\n"
}

err_check "$@"
uninstall_component "$@"
