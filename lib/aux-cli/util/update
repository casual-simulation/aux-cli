#!/bin/bash
set -e

help_menu() {
    echo ""
    echo "Usage:    update [OPTIONS]"
    echo ""
    echo "A tool that wraps the commands for updating AUX and software installed via apt-get."
    echo ""
    echo "Options:"
    echo "-a    --aux           Updates AUX to the latest version."
    echo "-A    --aux_auto      Toggle automatic updates on or off for AUX."
    echo "-c    --cli           Updates CLI to the latest version."
    echo "-C    --cli_auto      Toggle automatic updates on or off for CLI."
    echo "-p    --pi            Updates the software for your RaspberryPi (apt-get)."
    echo "-P    --pi_auto       Toggle automatic updates on or off for your RaspberryPi (apt-get)."
    echo "-h    --help          Displays this help information."
    echo ""
    exit 1
}

err_msg() {
    echo ""
    echo "\"$1\" is an invalid argument."
    echo "Run update -h for help."
    echo ""
    exit 1
}

update_aux() {
    # If hotspot mode is true, then do the work around
    if aux-cli hotspot -c; then
        aux-cli dhcpcd -s
        sleep 10
        curl https://raw.githubusercontent.com/casual-simulation/aux/master/docker/docker-compose.arm32.yml --output docker-compose.yml
        docker-compose pull && docker-compose up -d
        sleep 10
        aux-cli dhcpcd -u
    # Else, run as normal
    else
        docker-compose pull && docker-compose up -d
    fi
}

automatic_update_aux() {
    . /etc/aux-cli.conf

    if [ "${autoupdate_aux}" == "false" ]; then
        echo "Enabling Automatic updates for AUX."
        (crontab -l ; echo "0 * * * * aux-cli update -a") | crontab -
        sudo sed -i "s/autoupdate_aux="false"/autoupdate_aux="true"/g" /etc/aux-cli.conf
    else
        echo "Disabling Automatic updates for AUX."
        crontab -l | grep -v "aux-cli update -a" | crontab -
        sudo sed -i "s/autoupdate_aux="true"/autoupdate_aux="false"/g" /etc/aux-cli.conf
    fi
}

update_cli() {
    # If hotspot mode is true, then do the work around
    if aux-cli hotspot -c; then
        aux-cli dhcpcd -s
        sleep 10
        curl https://raw.githubusercontent.com/casual-simulation/aux-cli/master/install.sh --output install.sh && sudo bash install.sh
        sudo rm -rf install.sh
        sleep 10
        aux-cli dhcpcd -u
    # Else, run as normal
    else
        curl https://raw.githubusercontent.com/casual-simulation/aux-cli/master/install.sh --output install.sh && sudo bash install.sh
        sudo rm -rf install.sh
    fi
}

automatic_update_cli() {
    . /etc/aux-cli.conf

    if [ "${autoupdate_cli}" == "false" ]; then
        echo "Enabling Automatic updates for AUX-CLI."
        (crontab -l ; echo "0 * * * * aux-cli update -c") | crontab -
        sudo sed -i "s/autoupdate_cli="false"/autoupdate_cli="true"/g" /etc/aux-cli.conf
    else
        echo "Disabling Automatic updates for AUX-CLI."
        crontab -l | grep -v "aux-cli update -c" | crontab -
        sudo sed -i "s/autoupdate_cli="true"/autoupdate_cli="false"/g" /etc/aux-cli.conf
    fi
}

update_pi() {
    # If hotspot mode is true, then do the work around
    if aux-cli hotspot -c; then
        aux-cli dhcpcd -s
        sleep 10
        sudo apt-get update && apt-get upgrade -y
        sleep 10
        aux-cli dhcpcd -u
    # Else, run as normal
    else
        sudo apt-get update && apt-get upgrade -y
    fi
}

automatic_update_pi() {
    . /etc/aux-cli.conf

    if [ "${autoupdate_pi}" == "false" ]; then
        echo "Enabling Automatic updates for your RaspberryPi (apt-get)."
        (crontab -l ; echo "0 * * * * aux-cli update -p") | crontab -
        sudo sed -i "s/autoupdate_pi="false"/autoupdate_pi="true"/g" /etc/aux-cli.conf
    else
        echo "Disabling Automatic updates for your RaspberryPi (apt-get)."
        crontab -l | grep -v "aux-cli update -p" | crontab -
        sudo sed -i "s/autoupdate_pi="true"/autoupdate_pi="false"/g" /etc/aux-cli.conf
    fi
}

if [ $# -eq 0 ]; then
    echo ""
    echo "You need to specify what to update."
    help_menu
fi

while [[ $# -gt 0 ]]; do
    case "$1" in

    -a | --aux)
        update_aux
        shift # past argument
        ;;
    -A | --aux_auto)
        automatic_update_aux
        shift # past argument
        ;;
    -c | --cli)
        update_cli
        shift # past argument
        ;;
    -C | --cli_auto)
        automatic_update_cli
        shift # past argument
        ;;
    -p | --pi)
        update_pi
        shift # past argument
        ;;
    -P | --pi_auto)
        automatic_update_pi
        shift # past argument
        ;;
    -h | -help | --help)
        help_menu
        shift # past argument
        ;;
    *) # any option
        err_msg "$1"
        shift # past argument
        ;;
    esac
done
