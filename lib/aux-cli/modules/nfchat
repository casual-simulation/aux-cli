#!/bin/bash
set -e

RDIR=$(dirname "${BASH_SOURCE}")
DIR=$(cd $RDIR;pwd)

read_conf() {
    . /etc/aux-cli.conf
}

install() {
    # Install dependencies for nfchat
    echo "DEBUG: Setting up NFC Hat..."
    sudo apt-get install -y python3-spidev python3-dev python3-rpi.gpio python3-serial

    # Enable SPI
    if ! command lsmod | grep spi_ >/dev/null 2>&1; then
        echo "SPI is disabled."
        echo "Enabling now."
        printf "\n# Enable SPI\ndtparam=spi=on\n" | sudo tee -a /boot/config.txt

        read -t 10 -p "SPI requires a reboot to take effect. Press 'y' to reboot now, or press anything else to exit." -n 1 -r || echo "Moving on."
        echo # Gives us a newline
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo reboot now
        fi
    else
        echo "SPI is already enabled."
    fi
    sudo sed -i "s/^nfchat=\"false\"/nfchat=\"true\"/g" /etc/aux-cli.conf
}

uninstall() {
    sudo apt autoremove -y
    sudo apt-get remove -y python3-spidev python3-dev python3-rpi.gpio python3-serial
    sudo apt autoremove -y

    sudo sed -i "s/^nfchat=\"true\"/nfchat=\"false\"/g" /etc/aux-cli.conf
}

read_conf

if [ "$1" == "uninstall" ]; then
    if [ $nfchat == "true" ]; then
        uninstall
    else
        echo "NFC Hat is not installed. Skipping uninstallation."
    fi
else
    if [ $nfchat == "false" ]; then
        install
    else
        echo "NFC Hat is already installed. Skipping installation."
    fi
fi




############ NFC PI HAT ############

# RaspberryPi - Hardware Config

# Set L0 to Low(L)
# Set L1 to High(H) with Jumpers
# Connect RSTPDN and D20 with Jumper
# Set DIP switches to
#     SCK     ON
#     MISO    ON
#     MOSI    ON
#     NSS     ON
#     SCL     OFF
#     SDA     OFF
#     RX      OFF
#     TX      OFF

########## ROUGH DIAGRAM ###########
# _________________________________________________________________________________________________
# |        [o]  o
# |        [o] [o]
# |         o  [o]
# | o
# | o
# | o
# | o
# | o
# | o
# | o
# | o                                OFF   | [ ON ]
# | o                                OFF   | [ ON ]
# | o                                OFF   | [ ON ]
# | o                                OFF   | [ ON ]
# | o                              [ OFF ] |   ON 
# | o                              [ OFF ] |   ON 
# | o                              [ OFF ] |   ON 
# | o                              [ OFF ] |   ON 
# | o
# |[o]
# |[o]                                  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o 
# |                                     o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o 
# |________________________________________________________________________________________________




########## NFC EXPLAINED ###########

# An NTAG21x Tag has 44 (NTAG213), 134 (NTAG215), or 230 (NTAG216) "Pages" of information on them
# Each Page has 4 Bytes
#   ~Each Byte is 8 Bits/UInt8

# The UID/Serial Number takes up 7 Bytes, with 2 additional Bytes as "Check Bytes" (abbreviated: Check)
# These make up the first 9 Bytes of the NFC Tag

# The order of those 9 Bytes:

# Page  Byte0   Byte1   Byte2   Byte3
# 0     UID     UID     UID     Check    
# 1     UID     UID     UID     UID
# 2     Check
# 3
# 4

# After the UID/Serial Number, we finish off Page 2 with a single byte reserved for "Internal Data" (abbreviated: InData)

# It is followed by two "Static Lock Bytes" (abbreviated: Lock)
# Setting the Bits to 1 on the Lock Byte(s) to enable them is irreversible.

# Here is our current Page breakdown:

# Page  Byte0   Byte1   Byte2   Byte3
# 0     UID     UID     UID     Check    
# 1     UID     UID     UID     UID
# 2     Check   InData  Lock    Lock
# 3     
# 4

# After those Bytes, we have Page 3 Completely dedicated to the "Capability Container" (abbreviated: CC)
# These should already be preprogrammed and setting the bits to 1 is also irreversible.

# Byte 0 is function cluster code. E1h indicates that NFC-Forum defined data is stored in the data area. 
# Byte 1 is the version number of NFC_Forum_Type_2_Tag document. For version 1.0V it's 10h.
# Byte 2 in the capability container defines the available memory size for NDEF messages. 
#   This is only the data section of the tag, not the whole tag. How to Calculate: 3E hex is 62 dec. 62*8=496
#   | IC        | Value in Byte 2   | NDEF Memory Size
#   | NTAG213   | 12h               | 144 bytes /  36 Pages
#   | NTAG215   | 3Eh               | 496 bytes / 124 Pages
#   | NTAG216   | 6Dh               | 872 bytes / 218 Pages
# Byte 3 indicates read and write access capability if of the data area and CC area. (00h --> with read and write access granted without any security / 0Fh --> only read access granted)

# Here is our current Page breakdown:

# Page  Byte0   Byte1   Byte2   Byte3
# 0     UID     UID     UID     Check    
# 1     UID     UID     UID     UID
# 2     Check   InData  Lock    Lock
# 3     CC      CC      CC      CC
# 4


# If you have a NFC Forum Type 2 tag (like most current tags) you need two additional Bytes of information before your first Record.
# TLV = Tag, Length, Value
#   Tag - The Type of NFC Tag - Basically always 03h - Contains an NDEF message
#   Length - The Length of the NDEF Message starting at the next Byte
#   Value - The Rest of the NDEF Message (All Records combined)

# Here is our current Page breakdown:

# Page  Byte0   Byte1   Byte2   Byte3
# 0     UID     UID     UID     Check    
# 1     UID     UID     UID     UID
# 2     Check   InData  Lock    Lock
# 3     CC      CC      CC      CC
# 4     Type    Length

# Now, still on Page 4, we can begin to enter data. (Data)
# Each tag has it's own range of Data Pages. This section is able to be restricted using a password.
# | IC        | Page Range
# | NTAG213   | 4-39
# | NTAG215   | 4-129
# | NTAG216   | 4-225

# For our example, we are going to use an NTAG215 tag.
# Here is our current Page breakdown:

# Page  Byte0   Byte1   Byte2   Byte3
# 0     UID     UID     UID     Check    
# 1     UID     UID     UID     UID
# 2     Check   InData  Lock    Lock
# 3     CC      CC      CC      CC
# 4     Type    Length  Data    Data
# ...   Data    Data    Data    Data
# 129   Data    Data    Data    Data

# The Data is going to be entered as an NDEF Record(s).
# NDEF Records are composed of a Header and a Payload.
# The Header is going to describe a few details about the Payload that follows.

# QUICK NOTE: RFUI means reserved for future use - implemented. Write all bits and bytes denoted as RFUI as 0b. 

# After all of the data, we get to the Dynamic Lock Bytes. Each byte has 8 bits. Each bit locks a section of data.
# With the Block Locking bits (BL) set to 1, the corresponding page locking bits cannot be written anymore. This change is irreversable.
# Here is the breakdown of those bytes:

# Page 130, Byte 0
# Bit 0 - Lock Page 16-31
# Bit 1 - Lock Page 32-47
# Bit 2 - Lock Page 48-63
# Bit 3 - Lock Page 64-79
# Bit 4 - Lock Page 80-95
# Bit 5 - Lock Page 96-111
# Bit 6 - Lock Page 112-127
# Bit 7 - Lock Page 128-129
# Page 130, Byte 1
# Bit 0 - RFUI
# Bit 1 - RFUI
# Bit 2 - RFUI
# Bit 3 - RFUI
# Bit 4 - RFUI
# Bit 5 - RFUI
# Bit 6 - RFUI
# Bit 7 - RFUI
# Page 130, Byte 2
# Bit 0 - BL 16-47
# Bit 1 - BL 48-79
# Bit 2 - BL 80-111
# Bit 3 - BL 112-129
# Bit 4 - RFUI
# Bit 5 - RFUI
# Bit 6 - RFUI
# Bit 7 - RFUI


# After the Dynamic Lock Bytes, we get to the Configuration Pages.
# They are used to configure the memory access restriction and to configure the UID ASCII mirror feature

# Mirror Byte
# Page 131, byte 0, bit 0 - RFUI            0b
# Page 131, byte 0, bit 1 - RFUI            0b
# Page 131, byte 0, bit 2 - STRG_MOD_EN     0b: Strong Modulation Disabled | 1b: Strong Modulation Enabled
# Page 131, byte 0, bit 3 - RFUI            0b
# Page 131, byte 0, bit 4/5 - MIRROR_BYTE   The 2 bits define the byte position within the page defined by the MIRROR_PAGE byte (beginning of ASCII mirror)
#                                           00b: position 0 | 01b: position 1 | 10b: position 2 | 11b: position 3
# Page 131, byte 0, bit 6/7 - MIRROR_CONF   Defines which ASCII mirror shall be used, if the ASCII mirror is enabled by a valid the MIRROR_PAGE byte
#                                           00b: No ASCII Mirror | 01b: UID ASCII Mirror | 10b: NFC Counter ASCII Mirror | 11b:  UID and NFC Counter ASCII Mirror

# Mirror Page Byte  - Default: 00h | MIRROR_Page defines the page for the beginning of the ASCII mirroring. A value >03h enables the ASCII mirror feature.
# Auth0 Byte        - Default: FFh | AUTH0 defines the page address from which the password verification is required.
#                                    Valid address range for byte AUTH0 is from 00h to FFh.
#                                    If AUTH0 is set to a page address which is higher than the last page from the user
#                                    configuration, the password protection is effectively disabled.

# Access Byte
# Page 132, byte 0, bit 0/1/2 - AUTHLIM         001b-111b | Maximum number of negative password verification attempts
# Page 132, byte 0, bit 3 - NFC_CNT_PWD_PROT    NFC counter password protection. If the NFC counter password protection is enabled, the NFC tag will only respond
#                                               to a READ_CNT command with the NFC counter value after a valid password verification.
#                                               0b: NFC Counter not Protected | 1b: NFC Counter Protected
# Page 132, byte 0, bit 4 - NFC_CNT_EN          NFC counter configuration. If the NFC counter is enabled, the NFC counter will be automatically increased at
#                                               the first READ or FAST_READ command after a power on reset
#                                               0b: NFC Counter Disabled | 1b: NFC Counter Enabled
# Page 132, byte 0, bit 5 - RFUI                0b
# Page 132, byte 0, bit 6 - CFGLCK              Write locking bit for the user configuration. 
#                                               0b: user configuration open to write access | 1b: user configuration permanently locked against write access, except PWD and PACK
# Page 132, byte 0, bit 7 - PROT                One bit inside the ACCESS byte defining the memory protection
#                                               0b: write access is protected by the password verification | 1b: read and write access is protected by the password verification

# PWD Bytes - 32-bit password used for memory access protection
# Pack Bytes - 16-bit password acknowledge used during the password verification process

# Here is our current Page breakdown:

# Page  Byte0   Byte1   Byte2   Byte3
# 0     UID     UID     UID     Check    
# 1     UID     UID     UID     UID
# 2     Check   InData  Lock    Lock
# 3     CC      CC      CC      CC
# 4     Type    Length  Data    Data
# ...   Data    Data    Data    Data
# 129   Data    Data    Data    Data
# 130   DLock   DLock   DLock   RFUI
# 131   Mirror  RFUI    MirPag  Auth0
# 132   Access  RFUI    RFUI    RFUI
# 133   PWD     PWD     PWD     PWD
# 134   PACK    PACK    RFUI    RFUI


# Pages 0-3
# 04 55 C1 18
# 52 8E 60 80
# 3C 48 00 00
# E1 10 3E 00

# Pre-Header = 03 58 
#   Tag =                                   03 - Contains an NDEF Message
#   Length =                                58 - 88 (Bytes) - Total Message Length (From the start of the first Header to the end of the last Payload minus trailing FE Bytes)

# My Header = da 17 3c 01
#   TNF & Flags 1 Byte =                    DA - 11011010 - (MB: True) (ME:True) (CF:False) (SR:True) (IL:True) (TNF:2 - MIME Type)
#   Payload Type Length 1 Byte =            17 - 23 (Bytes) - Length of Type: application/vnd.wfa.wsc
#   Payload Length 1 Byte =                 3c - 60 (Bytes) - Length of Payload: WiFi Credentials plus the gibberish minus trailing FE Bytes
#   Payload ID Length 1 Byte =              01 - ID Length of 1
#   Payload Type 23 Bytes =                 6170 706c6963 6174696f 6e2f766e 642e7766 612e7773 63 - application/vnd.wfa.wsc
#   Payload ID =                            31 - ID is 1


###### Header ######
# 03 58 da 17 3c 01
# 6170 706c6963 6174696f 6e2f766e 642e7766 612e7773 63
# 31

##### Payload #####
# 100e00                - Mystery, unchanging as far as I know.
# 38                    - Number of bytes after this byte minus trailing FE Byte(s): 56 Characters/Bytes
# 1026 00010110 4500    - Mystery, unchanging as far as I know.
# 0d                    - Length of SSID: 13 Characters/Bytes

# 4D792053 77656574 20535349 44         - SSID: "My Sweet SSID" 
# 10030002 0001100f 00020001 102700     - Mystery, unchanging as far as I know.
# 08                                    - Length of Password: 8 Characters/Bytes
# 4C65744D 65496E21                     - Password: "LetMeIn!"
# 10200006 ffffffff ffff                - Mystery, unchanging as far as I know.
# fe                                    - If present, the rest of the Payload is filled with "00" Bytes



# For the most part, we don't want to ever touch Pages 0, 1, 2 or 3.
# Safely write from page 4 onwards






#NOTES

# Manufacturers
# https://isotc.iso.org/livelink/livelink/fetch/-8915513/8915538/8915579/ISO_IEC_JTC1_SC17_Standing_Document_5_Register_of_IC_Manufacturers.pdf?nodeid=10432471&vernum=-2

# Specs
# https://www.shopnfc.com/en/content/6-nfc-tags-specs#ntag

# https://www.nxp.com/docs/en/data-sheet/NTAG210_212.pdf
# https://www.nxp.com/docs/en/data-sheet/NTAG213_215_216.pdf
# https://www.nxp.com/docs/en/data-sheet/NTAG213F_216F.pdf

# https://www.mouser.com/datasheet/2/302/NT3H1101_1201-1127167.pdf



# https://stackoverflow.com/questions/37002498/distinguish-ntag213-from-mf0icu2
# +------------+------+---------+-----------+--------------+
# | Chip       | Type | Subtype | Version   | Storage size |
# +------------+------+---------+-----------+--------------+
# | NTAG210    | 0x04 | 0x01    | 0x01 0x00 | 0x0B         |
# | NTAG212    | 0x04 | 0x01    | 0x01 0x00 | 0x0E         |
# | NTAG213    | 0x04 | 0x02    | 0x01 0x00 | 0x0F         |
# | NTAG213F   | 0x04 | 0x04    | 0x01 0x00 | 0x0F         |
# | NTAG215    | 0x04 | 0x02    | 0x01 0x00 | 0x11         |
# | NTAG216    | 0x04 | 0x02    | 0x01 0x00 | 0x13         |
# | NTAG216F   | 0x04 | 0x04    | 0x01 0x00 | 0x13         |
# +------------+------+---------+-----------+--------------+
# | NT3H1101   | 0x04 | 0x02    | 0x01 0x01 | 0x13         |
# | NT3H1101W0 | 0x04 | 0x05    | 0x02 0x01 | 0x13         |
# | NT3H2111W0 | 0x04 | 0x05    | 0x02 0x02 | 0x13         |
# | NT3H2101   | 0x04 | 0x02    | 0x01 0x01 | 0x15         |
# | NT3H1201W0 | 0x04 | 0x05    | 0x02 0x01 | 0x15         |
# | NT3H2211W0 | 0x04 | 0x05    | 0x02 0x02 | 0x15         |
# +------------+------+---------+-----------+--------------+
# | MF0UL1101  | 0x03 | 0x01    | 0x01 0x00 | 0x0B         |
# | MF0ULH1101 | 0x03 | 0x02    | 0x01 0x00 | 0x0B         |
# | MF0UL2101  | 0x03 | 0x01    | 0x01 0x00 | 0x0E         |
# | MF0ULH2101 | 0x03 | 0x02    | 0x01 0x00 | 0x0E         |
# +------------+------+---------+-----------+--------------+

# https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v12.0.0%2Fnfc_ndef_format_dox.html
# https://community.nxp.com/thread/464994







"""
4 or 7 Byte
MIFARE Classic® EV1 1k
MIFARE Classic® EV1 4k

7 Byte
NTAG213
NTAG215
NTAG216

NTAG203
NTAG210
NTAG212

NTAG413
NTAG424

ST25TA512B
ST25TA02KB
ST25TA16K
ST25TA64K

MIFARE Ultralight® EV1

8 Byte
ICODE® SLIX-L
ICODE® SLIX
ICODE® SLIX-S
ICODE® SLIX 2




string tagType = detect_tag_type.py # Returns Type as String

# Extra Commands
aux-cli nfc -i --info
    sudo python3 ${tagType}.py info
        # have all the functions in here
        # or, have separate files with reusable functions
aux-cli nfc -r --read

# TNF 0 - Empty
aux-cli nfc -c --clear # Clears user data
aux-cli nfc -r --reset # Clears user data and also tries to reset the tag to defaults

# TNF 1 Records
aux-cli nfc -t --write-text <text> | <file>
aux-cli nfc -u --write-uri <uri>
aux-cli nfc -p --write-poster <bunch of stuff>
aux-cli nfc -s --write-sig <bunch of stuff>
aux-cli nfc -h --write-handover <bunch of stuff>
aux-cli nfc -w --write-wifi <ssid> <password>

# TNF 2 - MIME Type Records
aux-cli nfc -m --write-mime <bunch of stuff>

# TNF 3 - Absolute-URL records

# TNF 4 - External type records

# TNF 5 - Unknown type records

# TNF 6 - Unchanged type records





Slowly narrow down the tag options

Check UID

if len4
    set tag_type mifare
elif len7
    set tag_type ntag


coolscript - to lock tag
    if tag_type mifare
        do mifare stuff
    if tag_type ntag
        case ICM1
            do ICM1 stuff
        case ICM2
            do ICM2 stuff
        case ICM3 | ICM4
            do ICM3 stuff






"""