#!/bin/bash
set -e

RDIR=$(dirname "${BASH_SOURCE}")
DIR=$(cd $RDIR;pwd)

read_conf() {
    . /etc/aux-cli.conf
}

install() {
    # Install dependencies for nfchat
    echo "DEBUG: Setting up NFC Hat..."
    sudo apt-get install -y python3-spidev python3-dev python3-rpi.gpio python3-serial

    # Enable SPI
    if ! command lsmod | grep spi_ >/dev/null 2>&1; then
        echo "SPI is disabled."
        echo "Enabling now."
        printf "\n# Enable SPI\ndtparam=spi=on\n" | sudo tee -a /boot/config.txt

        read -t 10 -p "SPI requires a reboot to take effect. Press 'y' to reboot now, or press anything else to exit." -n 1 -r || echo "Moving on."
        echo # Gives us a newline
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo reboot now
        fi
    else
        echo "SPI is already enabled."
    fi
    sudo sed -i "s/^nfchat=\"false\"/nfchat=\"true\"/g" /etc/aux-cli.conf
}

uninstall() {
    sudo apt autoremove -y
    sudo apt-get remove -y python3-spidev python3-dev python3-rpi.gpio python3-serial
    sudo apt autoremove -y

    sudo sed -i "s/^nfchat=\"true\"/nfchat=\"false\"/g" /etc/aux-cli.conf
}

read_conf

if [ "$1" == "uninstall" ]; then
    if [ $nfchat == "true" ]; then
        uninstall
    else
        echo "NFC Hat is not installed. Skipping uninstallation."
    fi
else
    if [ $nfchat == "false" ]; then
        install
    else
        echo "NFC Hat is already installed. Skipping installation."
    fi
fi




############ NFC PI HAT ############

# RaspberryPi - Hardware Config

# Set L0 to Low(L)
# Set L1 to High(H) with Jumpers
# Connect RSTPDN and D20 with Jumper
# Set DIP switches to
#     SCK     ON
#     MISO    ON
#     MOSI    ON
#     NSS     ON
#     SCL     OFF
#     SDA     OFF
#     RX      OFF
#     TX      OFF

########## ROUGH DIAGRAM ###########
# _________________________________________________________________________________________________
# |        [o]  o
# |        [o] [o]
# |         o  [o]
# | o
# | o
# | o
# | o
# | o
# | o
# | o
# | o                                OFF   | [ ON ]
# | o                                OFF   | [ ON ]
# | o                                OFF   | [ ON ]
# | o                                OFF   | [ ON ]
# | o                              [ OFF ] |   ON 
# | o                              [ OFF ] |   ON 
# | o                              [ OFF ] |   ON 
# | o                              [ OFF ] |   ON 
# | o
# |[o]
# |[o]                                  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o 
# |                                     o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o  o 
# |________________________________________________________________________________________________




########## NFC EXPLAINED ###########

# An NTAG21x Tag has 44 (NTAG213), 134 (NTAG215), or 230 (NTAG216) "Pages" of information on them
# Each Page has 4 Bytes
#   ~Each Byte is 8 Bits/UInt8

# The UID/Serial Number takes up 7 Bytes, with 2 additional Bytes as "Check Bytes" (abbreviated: Check)
# These make up the first 9 Bytes of the NFC Tag

# The order of those 9 Bytes:

# Page  Byte0   Byte1   Byte2   Byte3
# 0     UID     UID     UID     Check    
# 1     UID     UID     UID     UID
# 2     Check
# 3
# 4

# After the UID/Serial Number, we finish off Page 2 with a single byte reserved for "Internal Data" (abbreviated: InData)

# It is followed by two "Static Lock Bytes" (abbreviated: Lock)
# Setting the Bits to 1 on the Lock Byte(s) to enable them is irreversible.

# Here is our current Page breakdown:

# Page  Byte0   Byte1   Byte2   Byte3
# 0     UID     UID     UID     Check    
# 1     UID     UID     UID     UID
# 2     Check   InData  Lock    Lock
# 3     
# 4

# After those Bytes, we have Page 3 Completely dedicated to the "Capability Container" (abbreviated: CC)
# These should already be preprogrammed and setting the bits to 1 is also irreversible.

# Byte 2 in the capability container defines the available memory size for NDEF messages. 
# | IC        | Value in Byte 2   | NDEF Memory Size
# | NTAG213   | 12h               | 144 bytes /  36 Pages
# | NTAG215   | 3Eh               | 496 bytes / 124 Pages
# | NTAG216   | 6Dh               | 872 bytes / 218 Pages

# Here is our current Page breakdown:

# Page  Byte0   Byte1   Byte2   Byte3
# 0     UID     UID     UID     Check    
# 1     UID     UID     UID     UID
# 2     Check   InData  Lock    Lock
# 3     CC      CC      CC      CC
# 4


# Now we are on Page 4, which is where we can begin to enter data. (Data)
# Each tag has it's own range of Data Pages. This section is able to be restricted using a password.
# | IC        | Page Range
# | NTAG213   | 4-39
# | NTAG215   | 4-129
# | NTAG216   | 4-225

# For our example, we are going to use an NTAG215 tag.
# Here is our current Page breakdown:

# Page  Byte0   Byte1   Byte2   Byte3
# 0     UID     UID     UID     Check    
# 1     UID     UID     UID     UID
# 2     Check   InData  Lock    Lock
# 3     CC      CC      CC      CC
# 4     Data    Data    Data    Data
# ...   Data    Data    Data    Data
# 129   Data    Data    Data    Data

# The Data is going to be entered as an NDEF Record(s).
# NDEF Records are composed of a Header and a Payload.
# The Header is going to describe a few details about the Payload that follows.

# If you have a TLV type tag (like I do) you need two additional Bytes of information before your Header.
# TLV = Tag, Length, Value
#   Tag - The Type of NFC Tag
#   Length - The Length of the NDEF Message starting at the next Byte
#   Value - The Rest of the NDEF Header

# My Header = 03 58 da 17 3c 01
#   Tag =                                   03 - NFC Forum Type 2
#   Length =                                58 - 88 (Bytes) - Total Message Length (From the next Byte to the end of Payload minus trailing FE Bytes)
#   TNF & Flags 1 Byte =                    DA - 11011010 - (MB: True) (ME:True) (CF:False) (SR:True) (IL:True) (TNF:2 - MIME Type)
#   Payload Type Length 1 Byte =            17 - 23 (Bytes) - Length of Type: application/vnd.wfa.wsc
#   Payload Length 1 Byte =                 3c - 60 (Bytes) - Length of Payload: WiFi Credentials plus the gibberish minus trailing FE Bytes
#   Payload ID Length 1 Byte =              01 - ID Length of 1
#   Payload Type 23 Bytes =                 6170 706c6963 6174696f 6e2f766e 642e7766 612e7773 63 - application/vnd.wfa.wsc
#   Payload ID =                            31 - ID is 1


###### Header ######
# 03 58 da 17 3c 01
# 6170 706c6963 6174696f 6e2f766e 642e7766 612e7773 63
# 31

##### Payload #####
# 100e00                - Mystery, unchanging as far as I know.
# 38                    - Number of bytes after this byte minus trailing FE Byte(s): 56 Characters/Bytes
# 1026 00010110 4500    - Mystery, unchanging as far as I know.
# 0d                    - Length of SSID: 13 Characters/Bytes

# 4D792053 77656574 20535349 44         - SSID: "My Sweet SSID" 
# 10030002 0001100f 00020001 102700     - Mystery, unchanging as far as I know.
# 08                                    - Length of Password: 8 Characters/Bytes
# 4C65744D 65496E21                     - Password: "LetMeIn!"
# 10200006 ffffffff ffff                - Mystery, unchanging as far as I know.
# fe                                    - If present, the rest of the Payload is filled with "00" Bytes



# For the most part, we don't want to ever touch Pages 0, 1, 2 or 3.
# Safely write from page 4 onwards